#  ุชุนุฑูู ููุงุณ ููุซู ุงูุนูุฏุฉ ูู ุงูุทุงุจูุฑ (ุงููููุฉ)
class TaskNode:
    def __init__(self, task_value, burst_time):
        self.task_value = task_value  # ุงููููุฉ ุงููุฏุฎูุฉ ูููููุฉ
        self.original_burst_time = burst_time  # ุงูุฒูู ุงูุฃุตูู ุงููุทููุจ ูุชูููุฐ ุงููููุฉ
        self.remaining_time = burst_time  # ุงูุฒูู ุงููุชุจูู ููุชูููุฐ
        self.execution_time = 0  # ุงูููุช ุงููุนูู ุงูุฐู ุงุณุชูููุชู ุงููููุฉ
        self.start_time = None  # ููุช ุจุฏุก ุงูุชูููุฐ
        self.next = None  # ูุคุดุฑ ุฅูู ุงูุนูุฏุฉ ุงูุชุงููุฉ

#  ุฅูุดุงุก ููุงุณ ููุซู ุงูุทุงุจูุฑ ุจุงุณุชุฎุฏุงู ูุงุฆูุฉ ูุชุตูุฉ
class TaskQueue:
    def __init__(self):
        self.front = None  # ุฃูู ุนูุตุฑ ูู ุงูุทุงุจูุฑ
        self.rear = None  # ุขุฎุฑ ุนูุตุฑ ูู ุงูุทุงุจูุฑ
        self.size = 0  # ุนุฏุฏ ุงูููุงู

    # ๐น ุฏุงูุฉ ูุฅุถุงูุฉ ูููุฉ ุฅูู ุงูุทุงุจูุฑ (enqueue)
    def enqueue(self, task_value, burst_time):
        new_task = TaskNode(task_value, burst_time)
        if self.rear is None:  # ุฅุฐุง ูุงู ุงูุทุงุจูุฑ ูุงุฑุบูุง
            self.front = self.rear = new_task
        else:
            self.rear.next = new_task  # ุฑุจุท ุงูุนูุฏุฉ ุงูุฌุฏูุฏุฉ ุจุขุฎุฑ ุนูุฏุฉ
            self.rear = new_task  # ุชุญุฏูุซ ุงููุคุดุฑ ุฅูู ุขุฎุฑ ุนูุฏุฉ
        self.size += 1

    # ๐น ุฏุงูุฉ ูุฅุฒุงูุฉ ุฃูู ูููุฉ ูู ุงูุทุงุจูุฑ (dequeue)
    def dequeue(self):
        if self.front is None:
            return None
        temp = self.front  # ุงูุญุตูู ุนูู ุฃูู ุนูุฏุฉ ูู ุงูุทุงุจูุฑ
        self.front = self.front.next  # ุชุญุฏูุซ ุฃูู ุนูุตุฑ ููููู ุงูุชุงูู
        if self.front is None:  # ุฅุฐุง ุฃุตุจุญ ุงูุทุงุจูุฑ ูุงุฑุบูุง
            self.rear = None
        self.size -= 1
        return temp  # ุฅุฑุฌุงุน ุงูุนูุฏุฉ ุงููุญุฐููุฉ

    # ๐น ุฏุงูุฉ ููุชุญูู ููุง ุฅุฐุง ูุงู ุงูุทุงุจูุฑ ูุงุฑุบูุง
    def is_empty(self):
        return self.front is None

    # ๐น ุฏุงูุฉ ูุฅุนุงุฏุฉ ุฅุฏุฎุงู ุงููููุฉ ุฅูู ููุงูุฉ ุงูุทุงุจูุฑ
    def re_enqueue(self, task):
        if self.rear is None:
            self.front = self.rear = task
        else:
            self.rear.next = task
            self.rear = task
        task.next = None  # ุงูุชุฃูุฏ ูู ุฃู ุงูุนูุฏุฉ ุงูุฃุฎูุฑุฉ ูุง ุชุดูุฑ ุฅูู ุนูุฏุฉ ุฃุฎุฑู
        self.size += 1

#  ุฏุงูุฉ ูุชุญุฏูุฏ ููุช ุงูุชูููุฐ ุชููุงุฆููุง ุจูุงุกู ุนูู ุงูุฅุฏุฎุงู
def determine_burst_time(value):
    if 1 <= value <= 5:
        return 5
    elif 6 <= value <= 10:
        return 6
    elif 11 <= value <= 20:
        return 7
    elif 21 <= value <= 30:
        return 10
    else:
        return 15

#  ุฏุงูุฉ ุชูููุฐ Round Robin ุจุญูุซ ุชุฃุฎุฐ ูู ูููุฉ ุงูููุช ุงููุญุฏุฏ ุจุงููุงูู
def round_robin_scheduler(task_queue, time_quantum):
    total_time = 0  # ุฅุฌูุงูู ููุช ุงูุชูููุฐ

    while not task_queue.is_empty():
        task = task_queue.dequeue()  # ุฃุฎุฐ ุฃูู ูููุฉ ูู ุงูุทุงุจูุฑ

        # ุชุนููู ููุช ุงูุจุฏุก ูุฃูู ูุฑุฉ
        if task.start_time is None:
            task.start_time = total_time

        # ุชูููุฐ ุงููููุฉ ููุฏุฉ time_quantum ุจุงููุงูู ุญุชู ูู ูุงูุช ุชุญุชุงุฌ ุฃูู
        print(f"\n๐น Executing task with value: {task.task_value} for {time_quantum} seconds...")
        total_time += time_quantum  # ุชุญุฏูุซ ุฅุฌูุงูู ุงูููุช
        task.execution_time += time_quantum  # ุชุณุฌูู ุงูููุช ุงููุณุชููู ุจุงููุงูู

        # ุชูููู ุงูุฒูู ุงููุชุจูู ูููููุฉ (ูุฏ ูุตุจุญ ุณุงูุจูุง ูููู ูุง ูุคุซุฑ ุนูู ุงูุญุณุงุจุงุช)
        task.remaining_time -= time_quantum

        if task.remaining_time <= 0:
            #task.waiting_time = total_time - task.start_time - task.original_burst_time
            print(f"โ Task with value '{task.task_value}' completed! Took: {task.execution_time} seconds.")
        else:
            # ุฅุฐุง ูู ุชูุชูู ุงููููุฉุ ูุชู ุฅุนุงุฏุชูุง ุฅูู ููุงูุฉ ุงูุทุงุจูุฑ
            task_queue.re_enqueue(task)

#  ุฏุงูุฉ ูุฅุฏุฎุงู ุงูุฃุฑูุงู ูู ุงููุณุชุฎุฏู ูุจุงุดุฑุฉ
def get_tasks_from_user():
    task_queue = TaskQueue()
    num_tasks = int(input("๐น Enter the number of tasks (numbers to be entered): "))

    for i in range(num_tasks):
        task_value = int(input(f"๐น Enter task number {i+1}: "))  # ุงููุณุชุฎุฏู ูุฏุฎู ุงูุฑูู ูุจุงุดุฑุฉ
        burst_time = determine_burst_time(task_value)  # ุชุนููู ุฒูู ุงูุชูููุฐ ุจูุงุกู ุนูู ุงูุฑูู ุงููุฏุฎู
        task_queue.enqueue(task_value, burst_time)

    return task_queue

#  ุชุดุบูู ุงูุฌุฏููุฉ ุจุงุณุชุฎุฏุงู Round Robin
if __name__ == "__main__":
    time_quantum = 4  # ุฒูู ุงููููุฉ ุงููุญุฏุฏ ูู ูุจู ุงููุจุฑูุฌ
    print(f"\n๐น Time quantum is set to: {time_quantum} seconds\n")

    task_queue = get_tasks_from_user()

    print("\n๐ Starting Round Robin Scheduling...\n")
    round_robin_scheduler(task_queue, time_quantum)
    print("\nโ All tasks are completed!")